# -*- python -*-
# ex: set filetype=python:

import os

from buildbot.plugins import *

c = BuildmasterConfig = {}

####### WORKERS

VERSIONS = {
    '3.5': 'py35',
    '3.6': 'py36',
}

REPOS = {
    'bonobo': 'https://github.com/python-bonobo/bonobo.git',
    'rdo': 'https://github.com/hartym/bonobo.git'
    }

c['workers'] = [worker.Worker(workername, 'password') for version, workername in VERSIONS.items()]

if 'BUILDBOT_MQ_URL' in os.environ:
    c['mq'] = {
        'type' : 'wamp',
        'router_url': os.environ['BUILDBOT_MQ_URL'],
        'realm': os.environ.get('BUILDBOT_MQ_REALM', 'buildbot').decode('utf-8'),
        'debug' : 'BUILDBOT_MQ_DEBUG' in os.environ,
        'debug_websockets' : 'BUILDBOT_MQ_DEBUG' in os.environ,
        'debug_lowlevel' : 'BUILDBOT_MQ_DEBUG' in os.environ,
    }

c['protocols'] = {'pb': {'port': os.environ.get("BUILDBOT_WORKER_PORT", 9989)}}

####### CHANGESOURCES

c['change_source'] = [changes.GitPoller( repo_url,
        workdir=repo_name, branches=True,
        pollinterval=30) for repo_name, repo_url in REPOS.items()]

####### BUILDERS

factories = {}
c['builders'] = []

builder_names = {}

for repo_name, repo_url in REPOS.items():
    builder_names[repo_name] = []
    for version, workername in VERSIONS.items():
        factories[version] = util.BuildFactory()
        factories[version].addStep(steps.Git(repourl=repo_url, mode='incremental'))
        factories[version].addStep(steps.ShellCommand(command=["virtualenv", "-p", "python"+version, ".virtualenv"]))
        factories[version].addStep(steps.ShellCommand(command=["make", "test"], env={"PYTHON": ".virtualenv/bin/python"}))

        name = repo_name+'-'+workername

        c['builders'].append(
            util.BuilderConfig(name=name,
              workernames=[workername],
              factory=factories[version])
        )

        builder_names[repo_name].append(name)

####### SCHEDULERS

c['schedulers'] = []
for repo_name, repo_url in REPOS.items():
    c['schedulers'] += [
        schedulers.AnyBranchScheduler(
                name=repo_name+"-commit",
                change_filter=util.ChangeFilter(repository=repo_url),
                treeStableTimer=None,
                builderNames=builder_names[repo_name],
                ),
        schedulers.Periodic(
                name=repo_name+"-nightly",
                change_filter=util.ChangeFilter(repository=repo_url),
                builderNames=builder_names[repo_name],
                periodicBuildTimer=24*60*60
                ),
    ]


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# like IRC bots.

c['status'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "Bonobo"
c['titleURL'] = "https://www.bonobo-project.org/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = os.environ.get("BUILDBOT_WEB_URL", "http://localhost:8080/")

# minimalistic config to activate new web UI
c['www'] = dict(port=os.environ.get("BUILDBOT_WEB_PORT", 8080),
                plugins=dict(waterfall_view={}, console_view={}))

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : os.environ.get("BUILDBOT_DB_URL", "sqlite://").format(**os.environ),
}
